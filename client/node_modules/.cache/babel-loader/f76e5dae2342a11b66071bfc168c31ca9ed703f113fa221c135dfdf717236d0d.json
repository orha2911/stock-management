{"ast":null,"code":"import { makeAutoObservable, action } from 'mobx';\nimport { getUserPortfolio } from './apiService';\nclass PortfolioStore {\n  constructor() {\n    this.portfolio = [];\n    this.isLoading = false;\n    makeAutoObservable(this, {\n      fetchPortfolio: action,\n      setPortfolio: action,\n      addStock: action\n    });\n  }\n  async fetchPortfolio() {\n    if (this.portfolio.length > 0) {\n      // Portfolio data already exists, no need to fetch\n      return;\n    }\n    this.isLoading = true;\n    this.error = '';\n    try {\n      const data = await getUserPortfolio('johndoe');\n      this.setPortfolio(data);\n    } catch (error) {\n      this.error = 'Failed to fetch portfolio';\n      console.error('Failed to fetch portfolio', error);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  setPortfolio(data) {\n    this.portfolio = data;\n  }\n\n  // async addStockToPortfolio(newStocks) {\n  //   try {\n  //     await updatePortfolio('johndoe', newStocks); // Replace with actual API call\n  //     this.setPortfolio(newStocks);\n  //   } catch (error) {\n  //     console.error('Failed to update portfolio', error);\n  //   }\n  // }\n}\nconst portfolioStore = new PortfolioStore();\nexport default portfolioStore;","map":{"version":3,"names":["makeAutoObservable","action","getUserPortfolio","PortfolioStore","constructor","portfolio","isLoading","fetchPortfolio","setPortfolio","addStock","length","error","data","console","portfolioStore"],"sources":["C:/Users/Public/.vscode/stocks-management/client/src/PortfolioStore.js"],"sourcesContent":["import { makeAutoObservable, action } from 'mobx';\r\nimport { getUserPortfolio } from './apiService';\r\n\r\nclass PortfolioStore {\r\n  portfolio = [];\r\n  isLoading = false;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this, {\r\n      fetchPortfolio: action,\r\n      setPortfolio: action,\r\n      addStock: action,\r\n    });\r\n  }\r\n\r\n  async fetchPortfolio() {\r\n    if (this.portfolio.length > 0) {\r\n      // Portfolio data already exists, no need to fetch\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n    this.error = '';\r\n\r\n    try {\r\n      const data = await getUserPortfolio('johndoe');\r\n      this.setPortfolio(data);\r\n    } catch (error) {\r\n      this.error = 'Failed to fetch portfolio';\r\n      console.error('Failed to fetch portfolio', error);\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n\r\n\r\n  setPortfolio(data) {\r\n    this.portfolio = data;\r\n  }\r\n\r\n  // async addStockToPortfolio(newStocks) {\r\n  //   try {\r\n  //     await updatePortfolio('johndoe', newStocks); // Replace with actual API call\r\n  //     this.setPortfolio(newStocks);\r\n  //   } catch (error) {\r\n  //     console.error('Failed to update portfolio', error);\r\n  //   }\r\n  // }\r\n}\r\n\r\nconst portfolioStore = new PortfolioStore();\r\nexport default portfolioStore;\r\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,MAAM,QAAQ,MAAM;AACjD,SAASC,gBAAgB,QAAQ,cAAc;AAE/C,MAAMC,cAAc,CAAC;EAInBC,WAAWA,CAAA,EAAG;IAAA,KAHdC,SAAS,GAAG,EAAE;IAAA,KACdC,SAAS,GAAG,KAAK;IAGfN,kBAAkB,CAAC,IAAI,EAAE;MACvBO,cAAc,EAAEN,MAAM;MACtBO,YAAY,EAAEP,MAAM;MACpBQ,QAAQ,EAAER;IACZ,CAAC,CAAC;EACJ;EAEA,MAAMM,cAAcA,CAAA,EAAG;IACrB,IAAI,IAAI,CAACF,SAAS,CAACK,MAAM,GAAG,CAAC,EAAE;MAC7B;MACA;IACF;IAEA,IAAI,CAACJ,SAAS,GAAG,IAAI;IACrB,IAAI,CAACK,KAAK,GAAG,EAAE;IAEf,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMV,gBAAgB,CAAC,SAAS,CAAC;MAC9C,IAAI,CAACM,YAAY,CAACI,IAAI,CAAC;IACzB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACd,IAAI,CAACA,KAAK,GAAG,2BAA2B;MACxCE,OAAO,CAACF,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD,CAAC,SAAS;MACR,IAAI,CAACL,SAAS,GAAG,KAAK;IACxB;EACF;EAGAE,YAAYA,CAACI,IAAI,EAAE;IACjB,IAAI,CAACP,SAAS,GAAGO,IAAI;EACvB;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AAEA,MAAME,cAAc,GAAG,IAAIX,cAAc,CAAC,CAAC;AAC3C,eAAeW,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}