{"ast":null,"code":"// stockStore.js\nimport { makeAutoObservable } from 'mobx';\nimport { getStockInfo } from '../apiService';\nclass StockStore {\n  constructor() {\n    this.stockData = {};\n    // Use an object to handle multiple stocks\n    this.isLoading = false;\n    this.error = '';\n    makeAutoObservable(this);\n  }\n  async fetchStock(symbol) {\n    console.log('dddd ', this.stockData);\n    if (this.stockData[symbol]) {\n      // Data already in store, no need to fetch\n      return;\n    }\n    this.isLoading = true;\n    this.error = '';\n    try {\n      const data = await getStockInfo(symbol);\n      this.stockData[symbol] = data; // Store data by symbol\n    } catch (error) {\n      this.error = 'Error fetching stock details';\n      console.error('Error fetching stock details:', error);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  clearStock(symbol) {\n    delete this.stockData[symbol]; // Clear specific stock data\n  }\n}\nconst stockStore = new StockStore();\nexport default stockStore;","map":{"version":3,"names":["makeAutoObservable","getStockInfo","StockStore","constructor","stockData","isLoading","error","fetchStock","symbol","console","log","data","clearStock","stockStore"],"sources":["C:/Users/Public/.vscode/stocks-management/client/src/stores/StockStore.js"],"sourcesContent":["// stockStore.js\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { getStockInfo } from '../apiService';\r\n\r\nclass StockStore {\r\n  stockData = {}; // Use an object to handle multiple stocks\r\n  isLoading = false;\r\n  error = '';\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  async fetchStock(symbol) {\r\n    console.log('dddd ', this.stockData)\r\n    if (this.stockData[symbol]) {\r\n      // Data already in store, no need to fetch\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    this.error = '';\r\n    try {\r\n      const data = await getStockInfo(symbol);\r\n      this.stockData[symbol] = data; // Store data by symbol\r\n    } catch (error) {\r\n      this.error = 'Error fetching stock details';\r\n      console.error('Error fetching stock details:', error);\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n\r\n  clearStock(symbol) {\r\n    delete this.stockData[symbol]; // Clear specific stock data\r\n  }\r\n}\r\n\r\nconst stockStore = new StockStore();\r\nexport default stockStore;\r\n"],"mappings":"AAAA;AACA,SAASA,kBAAkB,QAAQ,MAAM;AACzC,SAASC,YAAY,QAAQ,eAAe;AAE5C,MAAMC,UAAU,CAAC;EAKfC,WAAWA,CAAA,EAAG;IAAA,KAJdC,SAAS,GAAG,CAAC,CAAC;IAAE;IAAA,KAChBC,SAAS,GAAG,KAAK;IAAA,KACjBC,KAAK,GAAG,EAAE;IAGRN,kBAAkB,CAAC,IAAI,CAAC;EAC1B;EAEA,MAAMO,UAAUA,CAACC,MAAM,EAAE;IACvBC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE,IAAI,CAACN,SAAS,CAAC;IACpC,IAAI,IAAI,CAACA,SAAS,CAACI,MAAM,CAAC,EAAE;MAC1B;MACA;IACF;IACA,IAAI,CAACH,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI;MACF,MAAMK,IAAI,GAAG,MAAMV,YAAY,CAACO,MAAM,CAAC;MACvC,IAAI,CAACJ,SAAS,CAACI,MAAM,CAAC,GAAGG,IAAI,CAAC,CAAC;IACjC,CAAC,CAAC,OAAOL,KAAK,EAAE;MACd,IAAI,CAACA,KAAK,GAAG,8BAA8B;MAC3CG,OAAO,CAACH,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD,CAAC,SAAS;MACR,IAAI,CAACD,SAAS,GAAG,KAAK;IACxB;EACF;EAEAO,UAAUA,CAACJ,MAAM,EAAE;IACjB,OAAO,IAAI,CAACJ,SAAS,CAACI,MAAM,CAAC,CAAC,CAAC;EACjC;AACF;AAEA,MAAMK,UAAU,GAAG,IAAIX,UAAU,CAAC,CAAC;AACnC,eAAeW,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}